/*
// The MIT License (MIT)
// Copyright (c) 2021 Andrew Ross
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
*/

/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	
System Name:
System Number:
Programmer:		Andy Ross
Comments:		Module to load Serial values and store updates to/from the CrestronDataStore
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

// #DEFINE_CONSTANT DEBUG 1
#DEFINE_CONSTANT MAX_PROPERTIES 100

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "CDSSimplWindows"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT 	Initialize;

// ANALOG_INPUT 
STRING_INPUT 	SetValue[MAX_PROPERTIES][255],
				Tag[MAX_PROPERTIES][255],
				DefaultValue[MAX_PROPERTIES][255];
		
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT 	_SKIP_,Value[MAX_PROPERTIES];



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING _valueCache[MAX_PROPERTIES][255];
     
CDSInterface cdsInterface;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Integer_Function IsValidTag( string tag )
{
	return( ( Len( tag ) > 0 ) && ( tag <> " " ) );
}

Function UpdatePropertyValueFeedback( integer index, string propertyValue )
{
	if( index > 0 && index <= MAX_PROPERTIES )
	{
		#IF_DEFINED DEBUG PRINT( "\nUpdatePropertyValueFeedback(): Updating Property at index %d with value %s", index, propertyValue ); #ENDIF

	 	_valueCache[index] = propertyValue;
		Value[index] = propertyValue; 
	}
}

Function SaveValueToCDS( string tag, integer index, string value )
{
	Integer error;
    
	try
	{
		#IF_DEFINED DEBUG PRINT( "\nSaveValutToCDS(): Saving value at index %d, with tag %s, value %s", index, tag, value ); #ENDIF

		cdsInterface.SetLocalStringValue( tag, index, value );
	}
	catch
	{
     	// failed to set the value
	}
}


EventHandler CDSValueChanged( string tag, integer index, string newValue )
{
   	UpdatePropertyValueFeedback( index, newValue );
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Initialize
{
	Integer index, error, lookupFailed;
	string propertyValue[255];
      
	#IF_DEFINED DEBUG PRINT( "\nPUSH Initialize: Initializing CDS Data" ); #ENDIF

	for( index = 1 to MAX_PROPERTIES )
	{
		lookupFailed = 0;

    	if( IsSignalDefined( Tag[index] ) && IsValidTag( Tag[index] ) && IsSignalDefined( Value[ index ] ) )
		{
			#IF_DEFINED DEBUG PRINT( "\nPUSH Initialize: Checking for Tag %s at index %d", Tag[index], index ); #ENDIF
                         
			try
			{

	         	propertyValue = cdsInterface.GetLocalStringValue( Tag[index]);
    		}
			catch
			{
				// no valid value was returned, proceed to null check
				lookupFailed = 1;
			}
                       
			// the tag does not exist in the CrestronDataStore. Store the default value and update feedback
			if( lookupFailed = 1 )
			{
             	if( IsSignalDefined( DefaultValue[ index ] ) )
				{
					#IF_DEFINED DEBUG PRINT( "\nPUSH Initialized: Saving Default value %s for tag %s", DefaultValue[index], Tag[index] ); #ENDIF

                	SaveValueToCDS( Tag[index], index, DefaultValue[index] );
					UpdatePropertyValueFeedback( index, DefaultValue[index] );
				}
				else
				{
                 	PRINT( "\nNo default value set for Tag %s", Tag[index] );
				}
			}
			else // if a value exists then return it to the system
			{         
				UpdatePropertyValueFeedback( index, propertyValue )	;
			}
		} 	
		else
		{
         	PRINT( "\nInvalid Tag for propery at index %d", index);
		}
	}
}

CHANGE SetValue
{
 	Integer index;
	index = getLastModifiedArrayIndex( );
     
	#IF_DEFINED DEBUG PRINT( "\nCHANGE SetValue: index = %d, value = %s", index, SetValue[index] ); #ENDIF

	// if the value  changes and there is a valid tag, save the new value to the CrestronDataStore     
	if( IsSignalDefined( Tag[index] ) && IsValidTag( Tag[index] )  )
	{
		// if the value is different than what has already been cached
   		if( _valueCache[index] <> SetValue[index] )
		{
     		SaveValueToCDS( Tag[index], index, SetValue[index] );   	
		}	  	
	}     
                                                   
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	SetArray( _valueCache, 0 );
//    REgisterEvent( cdsInterface, SerialValueChanged, CDSValueChanged );

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


